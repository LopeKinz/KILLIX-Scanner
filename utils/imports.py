from requests   import get
from os         import mkdir
from os.path    import exists
from zipfile    import ZipFile
from string     import ascii_letters, digits


class CheckImports:
    def __init__(self, code) -> None:
        self.code = code

    def getmodinfo(self, module):
        r = get(f"https://pypi.org/pypi/{module}/json")
        return False if r.status_code == 404 else r.json()["urls"][0]["url"]

    def checkmodule(self, module):
        for i in module:
            if i not in ascii_letters + digits + "_-":
                return False
        
        r = get(f"https://pypi.org/pypi/{module}/json").status_code
        return r == 200 or self.check_if_imported(module)

    def check_if_imported(self, module):
        try:
            __import__(module)
            return True
        except:
            return False


    def _gather_imports(self):
        imports = [lin for lin in self.code.splitlines() if "import" in lin and not any([True for char in ['"', "'", ";", ".", "#"] if char in lin])]
        imports =  [
            imp.replace("import ", ",")
            .replace("from ", "")
            .replace(" ", "")
            .split(",")[0]
            if "from" in imp
            else imp.replace(" ", "")
            .replace("__import__", "")
            .replace("(", "")
            .replace(")", "")
            if "__import__" in imp
            else imp.replace("import ", "").replace(" ", "").split(",")[0]
            for imp in imports
        ]  # from billythegoat356 (i improved it a bit)
        return [imp for imp in imports if  self.checkmodule(imp)]

    def check_import(self, module):
        whitelist = [
            "absl-py"
            "aggdraw"
            "aiofiles"
            "aioflask"
            "aiohttp"
            "aiosignal"
            "altgraph"
            "anyio"
            "appdirs"
            "argon2-cffi"
            "argon2-cffi-bindings"
            "asgiref"
            "asttokens"
            "astunparse"
            "async-class"
            "async-generator"
            "async-timeout"
            "attrs"
            "AuthGG"
            "auto-py-to-exe"
            "backcall"
            "beautifulsoup4"
            "black"
            "blinker"
            "boto3"
            "botocore"
            "botright"
            "bottle"
            "bottle-websocket"
            "Brotli"
            "browser-cookie3"
            "bs4"
            "cachetools"
            "captcha"
            "certifi"
            "cffi"
            "cfscrape"
            "charset-normalizer"
            "click"
            "colorama"
            "colored"
            "Colr"
            "commonmark"
            "contourpy"
            "cryptography"
            "curlify"
            "cursor"
            "cycler"
            "Cython"
            "dangcf"
            "dearpygui"
            "decompyle3"
            "decorator"
            "discord"
            "discord.py"
            "discum"
            "easyocr"
            "Eel"
            "enum34"
            "exceptiongroup"
            "executing"
            "fastapi"
            "filelock"
            "filetype"
            "fire"
            "Flask"
            "Flask-SQLAlchemy"
            "flatbuffers"
            "fonttools"
            "frida"
            "frida-tools"
            "frozenlist"
            "func-timeout"
            "future"
            "gast"
            "gevent"
            "gevent-websocket"
            "gitdb"
            "GitPython"
            "google-auth"
            "google-auth-oauthlib"
            "google-pasta"
            "greenlet"
            "greenletio"
            "grpcio"
            "h11"
            "h2"
            "h5py"
            "hcaptcha-challenger"
            "holehe"
            "hpack"
            "httpcore"
            "httpq"
            "httptools"
            "httpx"
            "huggingface-hub"
            "hyperframe"
            "hypno"
            "idna"
            "ImageHash"
            "imageio"
            "importlib-metadata"
            "imutils"
            "iniconfig"
            "ipython"
            "iso8601"
            "itsdangerous"
            "jedi"
            "Jinja2"
            "jmespath"
            "joblib"
            "Js2Py"
            "kaitaistruct"
            "keptcha"
            "keras"
            "Keras-Applications"
            "Keras-Preprocessing"
            "keyboard"
            "kiwisolver"
            "leakcheck"
            "libclang"
            "loguru"
            "lz4"
            "Markdown"
            "markdown-it-py"
            "MarkupSafe"
            "matplotlib"
            "matplotlib-inline"
            "mdurl"
            "memory-profiler"
            "mitm"
            "MouseInfo"
            "multidict"
            "mypy-extensions"
            "networkx"
            "ninja"
            "nltk"
            "Nuitka"
            "numpy"
            "oauthlib"
            "openai"
            "opencv-contrib-python"
            "opencv-python"
            "opencv-python-headless"
            "opt-einsum"
            "ordered-set"
            "outcome"
            "packaging"
            "pandas"
            "parso"
            "passlib"
            "pathspec"
            "pbr"
            "pefile"
            "pep8"
            "pickleshare"
            "PIL-Tools"
            "Pillow"
            "ping3"
            "plaidml-keras"
            "platformdirs"
            "playwright"
            "playwright-stealth"
            "pluggy"
            "prompt-toolkit"
            "protobuf"
            "psutil"
            "pure-eval"
            "pyarmor"
            "pyasn1"
            "pyasn1-modules"
            "PyAutoGUI"
            "pybboxes"
            "pyclipper"
            "pycparser"
            "pycryptodome"
            "pycryptodomex"
            "pydantic"
            "pydivert"
            "pydub"
            "pyee"
            "PyExecJS"
            "PyGetWindow"
            "Pygments"
            "pyinjector"
            "pyinstaller"
            "pyinstaller-hooks-contrib"
            "pyjsparser"
            "PyMsgBox"
            "pynput"
            "pyobf2"
            "pyOpenSSL"
            "pyparsing"
            "pyperclip"
            "pyppeteer"
            "pypresence"
            "PyQt5"
            "PyQt5-Qt5"
            "PyQt5-sip"
            "PyRect"
            "PyScreeze"
            "pyseto"
            "PySocks"
            "pystyle" # ðŸ’€
            "pytesseract"
            "pytest"
            "pytest-base-url"
            "pytest-playwright"
            "python-bidi"
            "python-dateutil"
            "python-dotenv"
            "python-slugify"
            "pytweening"
            "pytz"
            "pytz-deprecation-shim"
            "PyWavelets"
            "pywin32"
            "pywin32-ctypes"
            "PyYAML"
            "redis"
            "regex"
            "replit"
            "requests"
            "requests-oauthlib"
            "requests-toolbelt"
            "rfc3986"
            "rich"
            "rsa"
            "s3transfer"
            "sahi"
            "sanic"
            "sanic-routing"
            "scikit-image"
            "scikit-learn"
            "scipy"
            "scrape-search-engine"
            "seaborn"
            "selenium"
            "selenium-wire"
            "sentence-transformers"
            "sentencepiece"
            "shapely"
            "six"
            "skidbilly"
            "sklearn"
            "smmap"
            "sniffio"
            "soc"
            "socks"
            "sortedcontainers"
            "soupsieve"
            "spark-parser"
            "SpeechRecognition"
            "SQLAlchemy"
            "stack-data"
            "starlette"
            "stdiomask"
            "suds-py3"
            "tensorboard"
            "tensorboard-data-server"
            "tensorboard-plugin-wit"
            "tensorflow"
            "tensorflow-estimator"
            "tensorflow-intel"
            "tensorflow-io-gcs-filesystem"
            "termcolor"
            "terminaltables"
            "text-unidecode"
            "thop"
            "threadpoolctl"
            "tifffile"
            "tinyaes"
            "tls-client"
            "tokenizers"
            "tomli"
            "tomlkit"
            "toolbox"
            "torch"
            "torchvision"
            "tqdm"
            "traitlets"
            "transformers"
            "trio"
            "trio-websocket"
            "TwoCaptcha"
            "typing_extensions"
            "tzdata"
            "tzlocal"
            "ua-parser"
            "uncompyle6"
            "undetected-chromedriver"
            "Unidecode"
            "urllib3"
            "uvicorn"
            "vcrpy"
            "waitress"
            "wcwidth"
            "webdriver-manager"
            "WebOb"
            "websocket-client"
            "websockets"
            "WebTest"
            "Werkzeug"
            "whichcraft"
            "win32-setctime"
            "WMI"
            "wrapt"
            "wsproto"
            "xdis"
            "xvfbwrapper"
            "yarl"
            "yolov5"
            "zipp"
            "zope.event"
            "zope.interface"
            "zstandard"
        ]

        if module in whitelist or self.check_if_imported(module):
            return (True, "xKian")
        else:
            print("[*] Checking:",module)
            download_url = self.getmodinfo(module)
            if download_url:
                pat     = f"./malicious/{module}"
                
                mkdir(pat) if not exists(pat)  else None
                whl     = get(download_url).content
                path    = f"./malicious/{module}/{module}.whl"

                open(path, "wb").write(whl)
                ZipFile(path).extractall(pat)
                print("[+] Downloaded:",module)
                return (False, pat)

if __name__ == "__main__":
    file = "C:/Users/kiana/Documents/GitHub/polonium/test.py"
    code = open(file, "r", errors="ignore").read()
    ci = CheckImports(code)
    imports = ci._gather_imports()
    print(len(imports))
    ci.check_imports(imports)
